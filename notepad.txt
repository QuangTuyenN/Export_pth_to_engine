import tensorrt as trt
import pycuda.driver as cuda
import pycuda.autoinit
import numpy as np
import cv2
import ctypes
# Load the TensorRT engine
engine_path = 'resnet50.engine'  # Thay đổi thành đường dẫn đến tệp engine của bạn
runtime = trt.Runtime(trt.Logger(trt.Logger.WARNING))
with open(engine_path, 'rb') as engine_file:
    engine_data = engine_file.read()
    engine = runtime.deserialize_cuda_engine(engine_data)

# Create an execution context for inference
context = engine.create_execution_context()

# Load and preprocess the image
image_path = 'bee.jpg'  # Thay đổi thành đường dẫn của hình ảnh bạn muốn phân loại
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image = cv2.resize(image, (224, 224))  # Đảm bảo kích thước ảnh phù hợp với mô hình

# Normalize the image
image = (image / 255.0).astype(np.float32)

# Prepare the input data
input_name = 'input.1'  # Thay đổi tên đầu vào nếu cần
input_index = engine.get_binding_index(input_name)
input_shape = engine.get_binding_shape(input_index)
print("----------------input shape--------------- ", input_shape)
input_data = np.ascontiguousarray(image, dtype=np.float32)
input_data = np.random.random((1, 3, 224, 224)).astype(np.float32)
input_data2 = input_data.ctypes.data_as(ctypes.c_void_p).value
print("----------------input_data-------------------- ", input_data)
bindings = [input_data2]
print("----------------binding-------------------- ", bindings)
# Allocate output memory for classification result
output_name = '495'  # Thay đổi tên đầu ra nếu cần
output_index = engine.get_binding_index(output_name)
output_shape = engine.get_binding_shape(output_index)
print("----------------output shape--------------- ", output_shape)
output_data = np.empty(output_shape, dtype=np.float32)
output_data = output_data.ctypes.data_as(ctypes.c_void_p).value
bindings.append(output_data)
print("----------------binding-------------------- ", bindings)
# Run inference
context.set_binding_shape(input_index, input_data.shape)
context.set_binding_shape(output_index, output_shape)
context.execute(1, bindings)

# Post-process the output (e.g., apply softmax)
output_data = np.exp(output_data) / np.sum(np.exp(output_data))
print("================output================= ", output_data)
# Load class labels (if available)
# class_labels = ['class_0', 'class_1', 'class_2']  # Thay đổi thành danh sách nhãn lớp của bạn

# Get the predicted class
predicted_class = np.argmax(output_data)

# Print the result
print(f"Predicted class: {predicted_class}")

